const express = require("express");
const dotenv = require("dotenv");
const axios = require("axios");
const cors = require("cors");
const db = require("./config/database");
const Post = require("./models/post");

dotenv.config();
const app = express();
app.use(cors());
app.use(express.json());

// Fetch and store data in DB
app.get("/fetch-data", async (req, res) => {
    try {
        const { data } = await axios.get("https://jsonplaceholder.typicode.com/posts");
        await Post.bulkCreate(data);
        res.json({ message: "Data successfully stored in DB" });
    } catch (error) {
        res.status(500).json({ error: "Error fetching or saving data" });
    }
});

// Get paginated and sorted data + Filtering & Searching
app.get("/posts", async (req, res) => {
    try {
        let { page = 1, limit = 10, sort = "id", order = "ASC", search = "", userId } = req.query;
        page = parseInt(page);
        limit = parseInt(limit);
        const offset = (page - 1) * limit;
        const where = {};

        // Search functionality
        if (search) {
            where[db.Sequelize.Op.or] = [
                { title: { [db.Sequelize.Op.like]: `%${search}%` } },
                { body: { [db.Sequelize.Op.like]: `%${search}%` } }
            ];
        }

        // Filter by User ID
        if (userId) where.userId = userId;

        const posts = await Post.findAndCountAll({
            where,
            limit,
            offset,
            order: [[sort, order.toUpperCase()]]
        });

        res.json({
            totalPosts: posts.count,
            totalPages: Math.ceil(posts.count / limit),
            currentPage: page,
            data: posts.rows
        });
    } catch (error) {
        res.status(500).json({ error: "Error retrieving data" });
    }
});

// Fetch a Single Post by ID
app.get("/posts/:id", async (req, res) => {
    try {
        const post = await Post.findByPk(req.params.id);
        if (!post) return res.status(404).json({ error: "Post not found" });
        res.json(post);
    } catch (error) {
        res.status(500).json({ error: "Error fetching post" });
    }
});

// Update a Post
app.put("/posts/:id", async (req, res) => {
    try {
        const { title, body } = req.body;
        const post = await Post.findByPk(req.params.id);
        if (!post) return res.status(404).json({ error: "Post not found" });

        await post.update({ title, body });
        res.json({ message: "Post updated successfully", post });
    } catch (error) {
        res.status(500).json({ error: "Error updating post" });
    }
});

// Delete a Post
app.delete("/posts/:id", async (req, res) => {
    try {
        const post = await Post.findByPk(req.params.id);
        if (!post) return res.status(404).json({ error: "Post not found" });

        await post.destroy();
        res.json({ message: "Post deleted successfully" });
    } catch (error) {
        res.status(500).json({ error: "Error deleting post" });
    }
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
